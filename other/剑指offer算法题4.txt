1、旋转数组的最小数字
  把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0
   （1）排序法忽略
    (2) 二分法
      int minNumberInRotateArray(vector<int> array) {
        if (array.size() == 0){
            return -1;
        }
        int left = 0;
        int right = array.size() - 1;
        int mid = left;
        // 当最左边值大于等于最右边时候
        while (array[left] >= array[right]){
            // 如果此时数组只剩下两个数值
            if (right - left == 1){
                // 最小的就是右边
                mid = right;
                break;
            }
            // 如果数组长度是2个以上
            mid = (left + right) / 2;
            // 假如最左边和中间以及最右边值都相等，只能进行顺序查找，如{1,1,1,0,1}
            if (array[left] == array[mid] && array[left] == array[right])
                return orderFind(array, left, right);
            // 如果最左边小于等于中间，说明最小值在后半部分，把mid位置标记为最左侧如{3,4,5,1,2}
            if (array[mid] >= array[left])
                left = mid;
            // 如果最左侧大于等于中间值，说明最小值在前半部分，把mid位置标记为最右侧{4,5,1,2,3}
            else if (array[mid] <= array[right])
                right = mid;
        }
        return array[mid];
    }

    int orderFind(vector<int> array, int left, int right) {
        int min = array[left];
        for (int i = left + 1; i <= right; i++) {
            if (array[i] < min)
                min = array[i];
        }
        return min;
    }
注意：旋转数组总是前半段大于后半段，没段都是升序排列
参考：https://blog.csdn.net/htt789/article/details/80970533


